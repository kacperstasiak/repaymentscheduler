package com.kacperstasiak.repaymentscheduler.UI;

import com.kacperstasiak.repaymentscheduler.MVC.Controller;
import com.kacperstasiak.repaymentscheduler.Debt;
import javax.swing.SwingUtilities;

/**
 * The user interface frame displaying the debts list
 * @author Kacper Stasiak
 */
public class DebtsListFrame extends javax.swing.JFrame {
    private ScheduleTableModel tableModel = null;
    private Controller controller = null;
    private ConfirmDialog confirmDialog;
    private AddEditFrame addEditMenu;
    
    /**
     * Creates new form testJFrame
     * @param model The tableModel class for the schedule
     * @param controller The controller class for the schedule
     */
    public DebtsListFrame(ScheduleTableModel model, Controller controller) {
        this.tableModel = model;
        this.controller = controller;
        initComponents();
        
        debtTable.setRowSelectionAllowed(true);
        // Add a listener on list selection
        debtTable.getSelectionModel().addListSelectionListener(
                (javax.swing.event.ListSelectionEvent event) -> 
                        listSelectionPerformed(event)
        );
        
        // Add a listener on value change
        budgetInputField.addPropertyChangeListener("value",  //NOI18N
                (java.beans.PropertyChangeEvent event) -> 
                        budgetInputValueChanged(event)
        );
        
        // Set default values for budget input
        int minPaySumPence = model.getMinimumPaymentSum();
        budgetInputField.setValue(minPaySumPence / 100.0);
        controller.updateBudgetAmount(minPaySumPence);
        
        // By default, warning shouldn't be displayed
        budgetWarningLabel.setVisible(false);
        
        // Update the UI
        update();
    }
    
    /**
     * Updates the frame view, specifically the debts table
     */
    final public void update() {
        // Update the table UI
        tableModel.update();
        
        // Use invokeLater to prevent certain null pointer exceptions
        SwingUtilities.invokeLater(debtTable::updateUI);
        
        double budget = ((Number)budgetInputField.getValue()).doubleValue();
        
        int minPaySumPence = tableModel.getMinimumPaymentSum();
        double minPaySum = minPaySumPence / 100.0;
        if (budget < minPaySum) {
            budgetWarningLabel.setVisible(true);
        } else {
            budgetWarningLabel.setVisible(false);
        }
        
        // Disable debt table if deletion dialog or add/edit menu is visible
        if (confirmDialog != null || addEditMenu != null) {
            budgetInputField.setEnabled(false);
            debtTable.setEnabled(false);
            addButton.setEnabled(false);
        } else {
            budgetInputField.setEnabled(true);
            debtTable.setEnabled(true);
            addButton.setEnabled(true);
        }
        
        // Update sidepanel
        updateSidepanel();
    }
    
    private void updateSidepanel() {
        int selectedRow = debtTable.getSelectedRow();
        if (selectedRow == -1 || tableModel.getValueAt(selectedRow, 0) == null) {
            sidepanelTitle.setText(java.util.ResourceBundle.getBundle("com/kacperstasiak/repaymentscheduler/English").getString("NOTHING SELECTED"));
        
            // Disable the edit and delete buttons if selection is invalid
            editButton.setEnabled(false);
            delButton.setEnabled(false);
            
            return;
        }
        
        // Disable the buttons if a delete dialog or add/edit menu is visible
        if (confirmDialog != null || addEditMenu != null) {
            editButton.setEnabled(false);
            delButton.setEnabled(false);
            
            return;
        }
        
        String title = (String) tableModel.getValueAt(selectedRow, 0);
        sidepanelTitle.setText(title);
        editButton.setEnabled(true);
        delButton.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addButton = new javax.swing.JButton();
        sidepanelSplitter = new javax.swing.JSplitPane();
        debtTableScroll = new javax.swing.JScrollPane();
        debtTable = new javax.swing.JTable();
        sidepanel = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        sidepanelTitle = new javax.swing.JLabel();
        budgetInputField = new javax.swing.JFormattedTextField();
        budgetAmountLabel = new javax.swing.JLabel();
        budgetWarningLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/kacperstasiak/repaymentscheduler/English"); // NOI18N
        setTitle(bundle.getString("TITLE")); // NOI18N
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setLocation(new java.awt.Point(0, 0));
        setSize(new java.awt.Dimension(1000, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        addButton.setText(bundle.getString("ADD BUTTON")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        sidepanelSplitter.setDividerLocation(850);

        debtTable.setModel(tableModel);
        debtTable.setFillsViewportHeight(true);
        debtTable.getTableHeader().setReorderingAllowed(false);
        debtTableScroll.setViewportView(debtTable);

        sidepanelSplitter.setLeftComponent(debtTableScroll);

        editButton.setText(bundle.getString("EDIT BUTTON")); // NOI18N
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        delButton.setText(bundle.getString("DELETE BUTTON")); // NOI18N
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        sidepanelTitle.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        sidepanelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sidepanelTitle.setText(bundle.getString("NOTHING SELECTED")); // NOI18N

        javax.swing.GroupLayout sidepanelLayout = new javax.swing.GroupLayout(sidepanel);
        sidepanel.setLayout(sidepanelLayout);
        sidepanelLayout.setHorizontalGroup(
            sidepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sidepanelLayout.createSequentialGroup()
                        .addComponent(sidepanelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(sidepanelLayout.createSequentialGroup()
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delButton)
                        .addGap(0, 19, Short.MAX_VALUE))))
        );
        sidepanelLayout.setVerticalGroup(
            sidepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sidepanelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sidepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(delButton))
                .addContainerGap(329, Short.MAX_VALUE))
        );

        sidepanelSplitter.setRightComponent(sidepanel);

        budgetAmountLabel.setText(bundle.getString("AVAILABLE REPAYMENT BUDGET")); // NOI18N

        budgetWarningLabel.setForeground(new java.awt.Color(200, 0, 0));
        budgetWarningLabel.setText(bundle.getString("WARNING: NOT ENOUGH TO COVER ALL MINIMUM PAYMENTS")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sidepanelSplitter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1051, Short.MAX_VALUE)
                    .addComponent(addButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(budgetAmountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(budgetInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(budgetWarningLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(budgetInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(budgetAmountLabel)
                    .addComponent(budgetWarningLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sidepanelSplitter, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Open the add menu
        openAddEditMenu();
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectedRow = debtTable.getSelectedRow();
        if (selectedRow == -1) return;
        Debt selected = tableModel.getDebtAt(selectedRow);
        
        // Do not allow editing if an add/edit menu is already displayed
        if (addEditMenu != null) {
            addEditMenu.toFront();
            return;
        }
        
        // Do not allow editing if deletion dialog is displayed
        if (confirmDialog != null) {
            confirmDialog.toFront();
            return;
        }
        
        // Open the edit menu
        openAddEditMenu(selected);
    }//GEN-LAST:event_editButtonActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        int selectedRow = debtTable.getSelectedRow();
        if (selectedRow == -1) return;
        Debt selected = tableModel.getDebtAt(selectedRow);
        
        // Do not allow editing if an add/edit menu is displayed
        if (addEditMenu != null) {
            addEditMenu.toFront();
            return;
        }
        
        // Do not allow editing if deletion dialog is already displayed
        if (confirmDialog != null) {
            confirmDialog.toFront();
            return;
        }
        
        // Create a confirmation dialog
        confirmDialog = new ConfirmDialog(this, () -> { controller.deleteDebt(selected); });
        confirmDialog.setVisible(true);
        
        // Update the UI
        update();
        
    }//GEN-LAST:event_delButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Make sure to close the add/edit menu
        if (addEditMenu != null) {
            closeAddEditMenu();
        }
        
        // Make sure to close the dialog box
        if (confirmDialog != null) {
            closeDialog();
        }
        
        // Inform the controller of the shutdown
        controller.shutdown();
    }//GEN-LAST:event_formWindowClosing
    
    private void listSelectionPerformed(javax.swing.event.ListSelectionEvent evt) {
        if (evt.getValueIsAdjusting()) return;
        
        // Update the UI
        update();
    }
    
    private void budgetInputValueChanged(java.beans.PropertyChangeEvent evt) {
        // Update the tableModel with new budget
        double budget = ((Number)budgetInputField.getValue()).doubleValue();
        controller.updateBudgetAmount((int) Math.floor(budget * 100));
        
        // Update the table tableModel
        tableModel.update();

        update();
    }

    /**
     * Opens the add menu
     */
    public void openAddEditMenu() {
        if (addEditMenu == null) {
            addEditMenu = new AddEditFrame(this, controller);
            addEditMenu.setVisible(true);
            update();
        }
    }
    
    /**
     * Opens the edit menu
     * @param editing The debt instance to edit
     */
    public void openAddEditMenu(Debt editing) {
        if (addEditMenu == null) {
            addEditMenu = new AddEditFrame(this, controller, editing);
            addEditMenu.setVisible(true);
            update();
        }
    }
    
    /**
     * Closes the add/edit menu
     */
    public void closeAddEditMenu() {
        if (addEditMenu != null) {
            addEditMenu.dispose();
            addEditMenu = null;
            update();
        }
    }
    
    /**
     * Closes the confirmation dialog
     */
    public void closeDialog() {
        if (confirmDialog != null) {
            confirmDialog.dispose();
            confirmDialog = null;
            update();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel budgetAmountLabel;
    private javax.swing.JFormattedTextField budgetInputField;
    private javax.swing.JLabel budgetWarningLabel;
    private javax.swing.JTable debtTable;
    private javax.swing.JScrollPane debtTableScroll;
    private javax.swing.JButton delButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel sidepanel;
    private javax.swing.JSplitPane sidepanelSplitter;
    private javax.swing.JLabel sidepanelTitle;
    // End of variables declaration//GEN-END:variables
}
